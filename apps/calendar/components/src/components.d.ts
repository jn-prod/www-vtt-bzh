/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CalendarView {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SearchForm {
    }
}
export interface SearchFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchFormElement;
}
declare global {
    interface HTMLCalendarViewElement extends Components.CalendarView, HTMLStencilElement {
    }
    var HTMLCalendarViewElement: {
        prototype: HTMLCalendarViewElement;
        new (): HTMLCalendarViewElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSearchFormElementEventMap {
        "search-form-launched": {
    dpt: string;
    startDate: string;
    endDate: string;
  };
        "search-form-canceled": { cancel: boolean };
    }
    interface HTMLSearchFormElement extends Components.SearchForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchFormElementEventMap>(type: K, listener: (this: HTMLSearchFormElement, ev: SearchFormCustomEvent<HTMLSearchFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchFormElementEventMap>(type: K, listener: (this: HTMLSearchFormElement, ev: SearchFormCustomEvent<HTMLSearchFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchFormElement: {
        prototype: HTMLSearchFormElement;
        new (): HTMLSearchFormElement;
    };
    interface HTMLElementTagNameMap {
        "calendar-view": HTMLCalendarViewElement;
        "my-component": HTMLMyComponentElement;
        "search-form": HTMLSearchFormElement;
    }
}
declare namespace LocalJSX {
    interface CalendarView {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SearchForm {
        "onSearch-form-canceled"?: (event: SearchFormCustomEvent<{ cancel: boolean }>) => void;
        "onSearch-form-launched"?: (event: SearchFormCustomEvent<{
    dpt: string;
    startDate: string;
    endDate: string;
  }>) => void;
    }
    interface IntrinsicElements {
        "calendar-view": CalendarView;
        "my-component": MyComponent;
        "search-form": SearchForm;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calendar-view": LocalJSX.CalendarView & JSXBase.HTMLAttributes<HTMLCalendarViewElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "search-form": LocalJSX.SearchForm & JSXBase.HTMLAttributes<HTMLSearchFormElement>;
        }
    }
}
